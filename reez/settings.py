"""
Django settings for reez project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
KLINIK = 'Klinik Kesihatan Puchong Batu 14'
KLINIKSHORT = 'KKP'

from pathlib import Path
import os
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# wagtail
# PROJECT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# BASE_DIR = os.path.dirname(PROJECT_DIR)
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-uqv8&@tg0l7=$b%v7#$@65%9bhplm1tk$sa=q07eo93@3vcd%6'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'daphne',  # Add daphne at the top for runserver override
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_htmx',
    'django_filters',
    'django_extensions',
    'debug_toolbar',
    'crispy_forms',
    'crispy_bootstrap4',
    'ordered_model',
    'slippers',

    'staff',
    'wad',
    'pesakit',
    'exam',
    'audit',  # Small-scale audit trails system

    'rest_framework',
    'corsheaders',
    'channels',

]
AUTH_USER_MODEL = 'staff.Staff'
MIDDLEWARE = [
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'audit.middleware.AuditContextMiddleware',  # Audit context for thread-local storage
    'login_required.middleware.LoginRequiredMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "django_htmx.middleware.HtmxMiddleware",
    'audit.middleware.SimpleAuditMiddleware',  # Simple audit logging
]
LOGIN_REQUIRED_IGNORE_PATHS = [
    r'/api/',
    r'/logint/',
    r'/logout/',
    r'/admin/',
    r'/about/$'
]

INTERNAL_IPS = [
    # ...
    "127.0.0.1",
    # ...
]

ROOT_URLCONF = 'reez.urls'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            "builtins": ["slippers.templatetags.slippers"],
        },
    },
]

WSGI_APPLICATION = 'reez.wsgi.application'
ASGI_APPLICATION = 'reez.asgi.application'

# Channels
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('127.0.0.1', 6379)],
        },
    },
}


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'ms-my'

TIME_ZONE = 'Asia/Kuala_Lumpur'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'
STATIC_URL = 'static/'


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap4"

CRISPY_TEMPLATE_PACK = "bootstrap4"

LOGIN_URL = '/login/'
LOGOUT_REDIRECT_URL = '/'


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 25
}

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://localhost:3001", 
    "http://127.0.0.1:3000",
    "http://127.0.0.1:3001",
]

# Temporarily allow all origins for debugging
CORS_ALLOW_ALL_ORIGINS = True

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
}

# File Upload Settings for DICOM files
FILE_UPLOAD_MAX_MEMORY_SIZE = 100 * 1024 * 1024  # 100MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 100 * 1024 * 1024  # 100MB
DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000  # Allow many files in one upload

# DICOM Configuration
DICOM_ORG_ROOT = '1.2.826.0.1.3680043.8.498'  # Example organization root UID
DICOM_AE_TITLE = 'RIS_MWL_SCP'  # Application Entity title for MWL server
DICOM_MWL_PORT = 11112  # Default port for MWL server

# Audit Trail Configuration
AUDIT_LOG_RETENTION_DAYS = 730  # 2 years retention period for compliance
AUDIT_LOG_CLEANUP_BATCH_SIZE = 1000  # Batch size for cleanup operations
AUDIT_SENSITIVE_FIELDS = [
    'ic', 'nric', 'phone', 'email', 'address', 
    'telefon', 'alamat', 'no_telefon', 'emel'
]  # Fields that should be masked in audit logs

# Configure logging for audit system
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'audit_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'logs/audit.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'loggers': {
        'audit': {
            'handlers': ['audit_file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'exam.ai_services': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'exam.ai_views': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

# ========== AI REPORTING SYSTEM CONFIGURATION ==========

# Ollama Server Configuration
AI_OLLAMA_SERVER_URL = os.environ.get('AI_OLLAMA_SERVER_URL', 'http://localhost:11434')

# Default AI Model Configuration
AI_DEFAULT_VISION_MODEL = os.environ.get('AI_VISION_MODEL', 'llava-med:7b')
AI_DEFAULT_MEDICAL_LLM = os.environ.get('AI_MEDICAL_LLM', 'meditron:7b')
AI_DEFAULT_QA_MODEL = os.environ.get('AI_QA_MODEL', 'medalpaca:7b')

# AI Processing Configuration
AI_MAX_PROCESSING_TIME = int(os.environ.get('AI_MAX_PROCESSING_TIME', '300'))  # 5 minutes
AI_CONFIDENCE_THRESHOLD = float(os.environ.get('AI_CONFIDENCE_THRESHOLD', '0.7'))
AI_CRITICAL_FINDINGS_THRESHOLD = float(os.environ.get('AI_CRITICAL_FINDINGS_THRESHOLD', '0.8'))

# AI Quality Assurance Settings
AI_ENABLE_QA_VALIDATION = os.environ.get('AI_ENABLE_QA_VALIDATION', 'True').lower() == 'true'
AI_REQUIRE_PEER_REVIEW_CRITICAL = os.environ.get('AI_REQUIRE_PEER_REVIEW_CRITICAL', 'True').lower() == 'true'
AI_AUTO_APPROVE_ROUTINE = os.environ.get('AI_AUTO_APPROVE_ROUTINE', 'False').lower() == 'true'

# AI Notification Settings
AI_NOTIFY_CRITICAL_FINDINGS = os.environ.get('AI_NOTIFY_CRITICAL_FINDINGS', 'True').lower() == 'true'
AI_NOTIFICATION_EMAILS = os.environ.get('AI_NOTIFICATION_EMAILS', '').split(',') if os.environ.get('AI_NOTIFICATION_EMAILS') else []

# AI System Settings
AI_REPORTING_ENABLED = os.environ.get('AI_REPORTING_ENABLED', 'True').lower() == 'true'
AI_MAINTENANCE_MODE = os.environ.get('AI_MAINTENANCE_MODE', 'False').lower() == 'true'

# Cache Configuration for AI Services
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'ai-reporting-cache',
        'TIMEOUT': 300,  # 5 minutes default timeout
        'OPTIONS': {
            'MAX_ENTRIES': 1000,
        }
    }
}

# Email Configuration for AI Notifications
if AI_NOTIFY_CRITICAL_FINDINGS and AI_NOTIFICATION_EMAILS:
    EMAIL_BACKEND = os.environ.get('EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend')
    EMAIL_HOST = os.environ.get('EMAIL_HOST', 'localhost')
    EMAIL_PORT = int(os.environ.get('EMAIL_PORT', '25'))
    EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'False').lower() == 'true'
    EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')
    EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')
    DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'ris@localhost')

# AI Report Template Settings
AI_REPORT_TEMPLATES = {
    'critical_findings_notification': 'exam/ai_critical_findings_notification.txt',
    'daily_ai_summary': 'exam/ai_daily_summary.txt',
}

# Security Settings for AI API Access
AI_API_RATE_LIMIT = os.environ.get('AI_API_RATE_LIMIT', '100/hour')  # Rate limiting for AI endpoints
AI_REQUIRE_2FA_FOR_CONFIG = os.environ.get('AI_REQUIRE_2FA_FOR_CONFIG', 'False').lower() == 'true'