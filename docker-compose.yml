# Docker Compose configuration for AI-Powered RIS Production
version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:14-alpine
    container_name: ris-database
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-ris_production}
      POSTGRES_USER: ${DATABASE_USER:-ris_user}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/docker/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - ris-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-ris_user} -d ${DATABASE_NAME:-ris_production}"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache and Sessions
  redis:
    image: redis:7-alpine
    container_name: ris-redis
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 2gb --maxmemory-policy allkeys-lru
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./deployment/docker/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - ris-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli --pass ${REDIS_PASSWORD} ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Ollama AI Server
  ollama:
    image: ollama/ollama:latest
    container_name: ris-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - ris-network
    restart: unless-stopped
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - OLLAMA_HOST=0.0.0.0
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:11434/api/tags || exit 1"]
      interval: 60s
      timeout: 30s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # RIS Application (Django + Next.js)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ris-app
    environment:
      # Django settings
      DJANGO_SETTINGS_MODULE: reez.settings_production
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DJANGO_DEBUG: "False"
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
      
      # Database
      DATABASE_ENGINE: django.db.backends.postgresql
      DATABASE_NAME: ${DATABASE_NAME:-ris_production}
      DATABASE_USER: ${DATABASE_USER:-ris_user}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_HOST: database
      DATABASE_PORT: 5432
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      REDIS_CACHE_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
      REDIS_SESSION_URL: redis://:${REDIS_PASSWORD}@redis:6379/2
      
      # AI System
      AI_OLLAMA_SERVER_URL: http://ollama:11434
      AI_REPORTING_ENABLED: "True"
      AI_VISION_MODEL: ${AI_VISION_MODEL:-llava-med:7b}
      AI_MEDICAL_LLM: ${AI_MEDICAL_LLM:-meditron:7b}
      
      # Security
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      
      # Email
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      
      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN}
      
    volumes:
      - app_static:/app/static
      - app_media:/app/media
      - app_logs:/app/logs
      - ./deployment/production.env:/app/.env
    ports:
      - "8000:8000"
      - "3000:3000"
    networks:
      - ris-network
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health/ || exit 1"]
      interval: 30s
      timeout: 30s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ris-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/docker/nginx-proxy.conf:/etc/nginx/conf.d/default.conf
      - app_static:/var/www/static:ro
      - app_media:/var/www/media:ro
      - ssl_certs:/etc/nginx/ssl:ro
    networks:
      - ris-network
    depends_on:
      - app
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/health/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backup Service
  backup:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.backup
    container_name: ris-backup
    environment:
      DATABASE_NAME: ${DATABASE_NAME:-ris_production}
      DATABASE_USER: ${DATABASE_USER:-ris_user}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      BACKUP_ENCRYPTION_KEY: ${BACKUP_ENCRYPTION_KEY}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      S3_BUCKET: ${BACKUP_S3_BUCKET}
    volumes:
      - backup_data:/backups
      - app_media:/app/media:ro
      - postgres_data:/var/lib/postgresql/data:ro
    networks:
      - ris-network
    depends_on:
      - database
    restart: unless-stopped
    command: ["crond", "-f"]
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Monitoring and Alerting
  monitoring:
    image: prom/prometheus:latest
    container_name: ris-monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - ris-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Log Management
  log-collector:
    image: fluent/fluent-bit:latest
    container_name: ris-logs
    volumes:
      - ./deployment/docker/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
      - app_logs:/app/logs:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - ris-network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ollama_data:
    driver: local
  app_static:
    driver: local
  app_media:
    driver: local
  app_logs:
    driver: local
  backup_data:
    driver: local
  ssl_certs:
    driver: local
  prometheus_data:
    driver: local

# Network configuration
networks:
  ris-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16