# Generated by Django 4.2.6 on 2025-08-04 02:15

import auto_prefetch
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('exam', '0031_rejectanalysistargetsettings'),
    ]

    operations = [
        migrations.CreateModel(
            name='AIGeneratedReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ai_model_version', models.CharField(help_text="Version of the AI model used for generation (e.g., 'llava-med-v1.0')", max_length=50)),
                ('ai_model_type', models.CharField(choices=[('vision_language', 'Vision-Language Model'), ('medical_llm', 'Medical LLM'), ('ensemble', 'Ensemble Model')], default='vision_language', help_text='Type of AI model used', max_length=30)),
                ('generated_report', models.TextField(help_text='The complete AI-generated report text')),
                ('report_sections', models.JSONField(default=dict, help_text='Structured report sections (clinical_history, findings, impression, etc.)')),
                ('confidence_score', models.FloatField(help_text='Overall confidence score from AI model (0.0 to 1.0)')),
                ('section_confidence', models.JSONField(default=dict, help_text='Confidence scores for each report section')),
                ('quality_metrics', models.JSONField(default=dict, help_text='Quality assurance metrics from validation models')),
                ('critical_findings', models.JSONField(default=list, help_text='List of critical findings detected by AI')),
                ('critical_findings_confidence', models.FloatField(blank=True, help_text='Confidence score for critical findings detection', null=True)),
                ('requires_urgent_review', models.BooleanField(default=False, help_text='Flag indicating if report requires urgent radiologist review')),
                ('review_status', models.CharField(choices=[('pending', 'Pending Review'), ('in_review', 'Under Review'), ('approved', 'Approved'), ('modified', 'Modified by Radiologist'), ('rejected', 'Rejected')], default='pending', help_text='Current review status of the AI-generated report', max_length=20)),
                ('reviewed_at', models.DateTimeField(blank=True, help_text='Timestamp when the report was reviewed', null=True)),
                ('final_report', models.TextField(blank=True, help_text='Final report text after radiologist review/modification')),
                ('orthanc_study_id', models.CharField(blank=True, help_text='Orthanc study ID for DICOM images used in analysis', max_length=100, null=True)),
                ('orthanc_series_ids', models.JSONField(default=list, help_text='List of Orthanc series IDs analyzed by AI')),
                ('dicom_metadata', models.JSONField(default=dict, help_text='Relevant DICOM metadata used for analysis')),
                ('processing_time_seconds', models.FloatField(blank=True, help_text='Time taken for AI report generation in seconds', null=True)),
                ('processing_errors', models.JSONField(default=list, help_text='List of errors encountered during processing')),
                ('processing_warnings', models.JSONField(default=list, help_text='List of warnings from AI processing pipeline')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('pemeriksaan', auto_prefetch.ForeignKey(help_text='The examination this AI report belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='ai_reports', to='exam.pemeriksaan')),
                ('reviewed_by', auto_prefetch.ForeignKey(blank=True, help_text='Radiologist who reviewed this AI report', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_ai_reports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'AI Generated Report',
                'verbose_name_plural': 'AI Generated Reports',
                'ordering': ['-created'],
                'abstract': False,
                'base_manager_name': 'prefetch_manager',
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('prefetch_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='RadiologistReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clinical_history', models.TextField(blank=True, help_text='Clinical history and indication for examination')),
                ('technique', models.TextField(blank=True, help_text='Imaging technique and parameters used')),
                ('findings', models.TextField(help_text='Detailed imaging findings')),
                ('impression', models.TextField(help_text='Clinical impression and diagnosis')),
                ('recommendations', models.TextField(blank=True, help_text='Follow-up recommendations and next steps')),
                ('ai_suggestions_used', models.JSONField(default=list, help_text='List of AI suggestions that were accepted and used')),
                ('ai_suggestions_modified', models.JSONField(default=list, help_text='List of AI suggestions that were modified by radiologist')),
                ('ai_suggestions_rejected', models.JSONField(default=list, help_text='List of AI suggestions that were rejected')),
                ('radiologist_additions', models.TextField(blank=True, help_text='Additional findings/content added by radiologist')),
                ('report_start_time', models.DateTimeField(auto_now_add=True, help_text='When radiologist started working on the report')),
                ('report_completion_time', models.DateTimeField(blank=True, help_text='When radiologist completed the report', null=True)),
                ('time_saved_estimate', models.IntegerField(blank=True, help_text='Estimated time saved using AI assistance (in minutes)', null=True)),
                ('complexity_level', models.CharField(choices=[('routine', 'Routine'), ('complex', 'Complex'), ('critical', 'Critical')], default='routine', help_text='Complexity level as assessed by radiologist', max_length=20)),
                ('radiologist_confidence', models.FloatField(blank=True, help_text="Radiologist's confidence in final report (0.0 to 1.0)", null=True)),
                ('report_status', models.CharField(choices=[('draft', 'Draft'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('approved', 'Approved'), ('archived', 'Archived')], default='draft', help_text='Current status of the radiologist report', max_length=20)),
                ('peer_review_required', models.BooleanField(default=False, help_text='Flag indicating if peer review is required')),
                ('peer_review_date', models.DateTimeField(blank=True, help_text='Date of peer review completion', null=True)),
                ('peer_review_comments', models.TextField(blank=True, help_text='Comments from peer reviewer')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('ai_report', models.OneToOneField(help_text='The AI report this radiologist report is based on', on_delete=django.db.models.deletion.CASCADE, related_name='radiologist_report', to='exam.aigeneratedreport')),
                ('peer_reviewer', auto_prefetch.ForeignKey(blank=True, help_text='Peer reviewer for quality assurance', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='peer_reviewed_reports', to=settings.AUTH_USER_MODEL)),
                ('radiologist', auto_prefetch.ForeignKey(help_text='Radiologist creating this report', on_delete=django.db.models.deletion.CASCADE, related_name='radiologist_reports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Radiologist Report',
                'verbose_name_plural': 'Radiologist Reports',
                'ordering': ['-created'],
                'abstract': False,
                'base_manager_name': 'prefetch_manager',
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('prefetch_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='AIModelPerformance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_version', models.CharField(help_text='AI model version being tracked', max_length=50)),
                ('model_type', models.CharField(choices=[('vision_language', 'Vision-Language Model'), ('medical_llm', 'Medical LLM'), ('qa_model', 'Quality Assurance Model'), ('ensemble', 'Ensemble Model')], help_text='Type of AI model', max_length=30)),
                ('analysis_date', models.DateField(help_text='Date of performance analysis (typically monthly)')),
                ('total_reports_generated', models.PositiveIntegerField(default=0, help_text='Total number of reports generated in this period')),
                ('reports_approved_unchanged', models.PositiveIntegerField(default=0, help_text='Reports approved without any changes')),
                ('reports_modified', models.PositiveIntegerField(default=0, help_text='Reports modified by radiologists')),
                ('reports_rejected', models.PositiveIntegerField(default=0, help_text='Reports completely rejected')),
                ('accuracy_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Overall accuracy rate as percentage', max_digits=5, null=True)),
                ('critical_findings_sensitivity', models.DecimalField(blank=True, decimal_places=2, help_text='Sensitivity for detecting critical findings', max_digits=5, null=True)),
                ('false_positive_rate', models.DecimalField(blank=True, decimal_places=2, help_text='False positive rate as percentage', max_digits=5, null=True)),
                ('average_processing_time', models.FloatField(blank=True, help_text='Average processing time in seconds', null=True)),
                ('average_time_saved', models.FloatField(blank=True, help_text='Average time saved by radiologists in minutes', null=True)),
                ('user_satisfaction_score', models.DecimalField(blank=True, decimal_places=2, help_text='User satisfaction score (1.0 to 5.0)', max_digits=3, null=True)),
                ('system_uptime_percentage', models.DecimalField(blank=True, decimal_places=2, help_text='System uptime percentage for the period', max_digits=5, null=True)),
                ('error_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Processing error rate as percentage', max_digits=5, null=True)),
                ('performance_notes', models.TextField(blank=True, help_text='Notes about performance trends and issues')),
                ('improvement_actions', models.TextField(blank=True, help_text='Actions taken or planned for improvement')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('created_by', auto_prefetch.ForeignKey(blank=True, help_text='User who created this performance record', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('modality', auto_prefetch.ForeignKey(blank=True, help_text='Specific modality for this performance analysis', null=True, on_delete=django.db.models.deletion.CASCADE, to='exam.modaliti')),
            ],
            options={
                'verbose_name': 'AI Model Performance',
                'verbose_name_plural': 'AI Model Performance Records',
                'ordering': ['-analysis_date', 'model_version'],
            },
        ),
        migrations.CreateModel(
            name='AIConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ollama_server_url', models.URLField(default='http://localhost:11434', help_text='URL of the Ollama server')),
                ('vision_language_model', models.CharField(default='llava-med:7b', help_text='Vision-language model for image analysis', max_length=100)),
                ('medical_llm_model', models.CharField(default='meditron:7b', help_text='Medical LLM for report generation', max_length=100)),
                ('qa_model', models.CharField(default='medalpaca:7b', help_text='Quality assurance model', max_length=100)),
                ('max_processing_time_seconds', models.PositiveIntegerField(default=300, help_text='Maximum time allowed for AI processing (seconds)')),
                ('confidence_threshold', models.FloatField(default=0.7, help_text='Minimum confidence threshold for auto-approval')),
                ('critical_findings_threshold', models.FloatField(default=0.8, help_text='Confidence threshold for flagging critical findings')),
                ('enable_qa_validation', models.BooleanField(default=True, help_text='Enable quality assurance validation')),
                ('require_peer_review_critical', models.BooleanField(default=True, help_text='Require peer review for critical findings')),
                ('auto_approve_routine_reports', models.BooleanField(default=False, help_text='Auto-approve routine reports above confidence threshold')),
                ('notify_on_critical_findings', models.BooleanField(default=True, help_text='Send notifications for critical findings')),
                ('notification_emails', models.JSONField(default=list, help_text='Email addresses for notifications')),
                ('enable_ai_reporting', models.BooleanField(default=True, help_text='Enable AI reporting system')),
                ('maintenance_mode', models.BooleanField(default=False, help_text='Enable maintenance mode (disable AI processing)')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('modified_by', auto_prefetch.ForeignKey(blank=True, help_text='User who last modified the configuration', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'AI Configuration',
                'verbose_name_plural': 'AI Configurations',
            },
        ),
        migrations.CreateModel(
            name='ReportCollaboration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interaction_type', models.CharField(choices=[('accept_ai_finding', 'Accepted AI Finding'), ('modify_ai_finding', 'Modified AI Finding'), ('reject_ai_finding', 'Rejected AI Finding'), ('add_new_finding', 'Added New Finding'), ('request_ai_second_opinion', 'Requested AI Second Opinion'), ('flag_ai_error', 'Flagged AI Error'), ('approve_ai_suggestion', 'Approved AI Suggestion')], help_text='Type of collaborative interaction', max_length=30)),
                ('ai_suggestion', models.TextField(help_text='Original AI suggestion or finding')),
                ('radiologist_action', models.TextField(help_text='Action taken by radiologist')),
                ('report_section', models.CharField(choices=[('clinical_history', 'Clinical History'), ('technique', 'Technique'), ('findings', 'Findings'), ('impression', 'Impression'), ('recommendations', 'Recommendations')], help_text='Report section where interaction occurred', max_length=30)),
                ('confidence_before', models.FloatField(help_text='AI confidence score before radiologist interaction')),
                ('confidence_after', models.FloatField(blank=True, help_text='Updated confidence after radiologist input', null=True)),
                ('feedback_category', models.CharField(blank=True, choices=[('correct', 'AI was correct'), ('incorrect', 'AI was incorrect'), ('incomplete', 'AI was incomplete'), ('irrelevant', 'AI was irrelevant'), ('helpful', 'AI was helpful')], help_text='Radiologist feedback on AI performance', max_length=20, null=True)),
                ('improvement_suggestion', models.TextField(blank=True, help_text='Radiologist suggestion for AI improvement')),
                ('ai_reasoning', models.JSONField(default=dict, help_text="AI's reasoning for the suggestion (if available)")),
                ('image_regions', models.JSONField(default=list, help_text='Image regions/coordinates relevant to this interaction')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='When this interaction occurred')),
                ('radiologist_report', auto_prefetch.ForeignKey(help_text='The radiologist report this collaboration belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='collaborations', to='exam.radiologistreport')),
            ],
            options={
                'verbose_name': 'Report Collaboration',
                'verbose_name_plural': 'Report Collaborations',
                'ordering': ['timestamp'],
                'abstract': False,
                'base_manager_name': 'prefetch_manager',
                'indexes': [models.Index(fields=['radiologist_report', 'timestamp'], name='exam_report_radiolo_0ad160_idx'), models.Index(fields=['interaction_type', 'feedback_category'], name='exam_report_interac_37c7d9_idx'), models.Index(fields=['report_section'], name='exam_report_report__dd192d_idx')],
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('prefetch_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddIndex(
            model_name='radiologistreport',
            index=models.Index(fields=['radiologist', 'report_completion_time'], name='exam_radiol_radiolo_adde6d_idx'),
        ),
        migrations.AddIndex(
            model_name='radiologistreport',
            index=models.Index(fields=['complexity_level', 'radiologist_confidence'], name='exam_radiol_complex_a71ed6_idx'),
        ),
        migrations.AddIndex(
            model_name='radiologistreport',
            index=models.Index(fields=['report_status'], name='exam_radiol_report__73d5a7_idx'),
        ),
        migrations.AddIndex(
            model_name='radiologistreport',
            index=models.Index(fields=['peer_review_required', 'peer_review_date'], name='exam_radiol_peer_re_36cadf_idx'),
        ),
        migrations.AddIndex(
            model_name='aimodelperformance',
            index=models.Index(fields=['model_version', 'analysis_date'], name='exam_aimode_model_v_955554_idx'),
        ),
        migrations.AddIndex(
            model_name='aimodelperformance',
            index=models.Index(fields=['modality', 'analysis_date'], name='exam_aimode_modalit_047188_idx'),
        ),
        migrations.AddConstraint(
            model_name='aimodelperformance',
            constraint=models.UniqueConstraint(fields=('model_version', 'analysis_date', 'modality'), name='unique_performance_per_model_date_modality'),
        ),
        migrations.AddIndex(
            model_name='aigeneratedreport',
            index=models.Index(fields=['pemeriksaan', 'review_status'], name='exam_aigene_pemerik_02f53b_idx'),
        ),
        migrations.AddIndex(
            model_name='aigeneratedreport',
            index=models.Index(fields=['ai_model_version', 'confidence_score'], name='exam_aigene_ai_mode_e89790_idx'),
        ),
        migrations.AddIndex(
            model_name='aigeneratedreport',
            index=models.Index(fields=['orthanc_study_id'], name='exam_aigene_orthanc_4df98b_idx'),
        ),
        migrations.AddIndex(
            model_name='aigeneratedreport',
            index=models.Index(fields=['requires_urgent_review', 'review_status'], name='exam_aigene_require_1c2812_idx'),
        ),
        migrations.AddIndex(
            model_name='aigeneratedreport',
            index=models.Index(fields=['created'], name='exam_aigene_created_c25638_idx'),
        ),
    ]
